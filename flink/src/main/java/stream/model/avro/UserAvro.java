/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package stream.model.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserAvro extends org.apache.avro.specific.SpecificRecordBase
		implements org.apache.avro.specific.SpecificRecord {
	private static final long serialVersionUID = 2471747211562552463L;
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
			"{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"stream.model.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"timeStamp\",\"type\":\"long\"}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	private static SpecificData MODEL$ = new SpecificData();

	private static final BinaryMessageEncoder<UserAvro> ENCODER = new BinaryMessageEncoder<UserAvro>(MODEL$, SCHEMA$);

	private static final BinaryMessageDecoder<UserAvro> DECODER = new BinaryMessageDecoder<UserAvro>(MODEL$, SCHEMA$);

	/**
	 * Return the BinaryMessageDecoder instance used by this class.
	 */
	public static BinaryMessageDecoder<UserAvro> getDecoder() {
		return DECODER;
	}

	/**
	 * Create a new BinaryMessageDecoder instance for this class that uses the
	 * specified {@link SchemaStore}.
	 * 
	 * @param resolver
	 *            a {@link SchemaStore} used to find schemas by fingerprint
	 */
	public static BinaryMessageDecoder<UserAvro> createDecoder(SchemaStore resolver) {
		return new BinaryMessageDecoder<UserAvro>(MODEL$, SCHEMA$, resolver);
	}

	/** Serializes this User to a ByteBuffer. */
	public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
		return ENCODER.encode(this);
	}

	/** Deserializes a User from a ByteBuffer. */
	public static UserAvro fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
		return DECODER.decode(b);
	}

	@Deprecated
	public java.lang.CharSequence name;
	@Deprecated
	public long timeStamp;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public UserAvro() {
	}

	/**
	 * All-args constructor.
	 * 
	 * @param name
	 *            The new value for name
	 * @param timeStamp
	 *            The new value for timeStamp
	 */
	public UserAvro(java.lang.CharSequence name, java.lang.Long timeStamp) {
		this.name = name;
		this.timeStamp = timeStamp;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(int field$) {
		switch (field$) {
		case 0:
			return name;
		case 1:
			return timeStamp;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(int field$, java.lang.Object value$) {
		switch (field$) {
		case 0:
			name = (java.lang.CharSequence) value$;
			break;
		case 1:
			timeStamp = (java.lang.Long) value$;
			break;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	/**
	 * Gets the value of the 'name' field.
	 * 
	 * @return The value of the 'name' field.
	 */
	public java.lang.CharSequence getName() {
		return name;
	}

	/**
	 * Sets the value of the 'name' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setName(java.lang.CharSequence value) {
		this.name = value;
	}

	/**
	 * Gets the value of the 'timeStamp' field.
	 * 
	 * @return The value of the 'timeStamp' field.
	 */
	public java.lang.Long getTimeStamp() {
		return timeStamp;
	}

	/**
	 * Sets the value of the 'timeStamp' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setTimeStamp(java.lang.Long value) {
		this.timeStamp = value;
	}

	/**
	 * Creates a new User RecordBuilder.
	 * 
	 * @return A new User RecordBuilder
	 */
	public static stream.model.avro.UserAvro.Builder newBuilder() {
		return new stream.model.avro.UserAvro.Builder();
	}

	/**
	 * Creates a new User RecordBuilder by copying an existing Builder.
	 * 
	 * @param other
	 *            The existing builder to copy.
	 * @return A new User RecordBuilder
	 */
	public static stream.model.avro.UserAvro.Builder newBuilder(stream.model.avro.UserAvro.Builder other) {
		return new stream.model.avro.UserAvro.Builder(other);
	}

	/**
	 * Creates a new User RecordBuilder by copying an existing User instance.
	 * 
	 * @param other
	 *            The existing instance to copy.
	 * @return A new User RecordBuilder
	 */
	public static stream.model.avro.UserAvro.Builder newBuilder(stream.model.avro.UserAvro other) {
		return new stream.model.avro.UserAvro.Builder(other);
	}

	/**
	 * RecordBuilder for User instances.
	 */
	public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserAvro>
			implements org.apache.avro.data.RecordBuilder<UserAvro> {

		private java.lang.CharSequence name;
		private long timeStamp;

		/** Creates a new Builder */
		private Builder() {
			super(SCHEMA$);
		}

		/**
		 * Creates a Builder by copying an existing Builder.
		 * 
		 * @param other
		 *            The existing Builder to copy.
		 */
		private Builder(stream.model.avro.UserAvro.Builder other) {
			super(other);
			if (isValidValue(fields()[0], other.name)) {
				this.name = data().deepCopy(fields()[0].schema(), other.name);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.timeStamp)) {
				this.timeStamp = data().deepCopy(fields()[1].schema(), other.timeStamp);
				fieldSetFlags()[1] = true;
			}
		}

		/**
		 * Creates a Builder by copying an existing User instance
		 * 
		 * @param other
		 *            The existing instance to copy.
		 */
		private Builder(stream.model.avro.UserAvro other) {
			super(SCHEMA$);
			if (isValidValue(fields()[0], other.name)) {
				this.name = data().deepCopy(fields()[0].schema(), other.name);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.timeStamp)) {
				this.timeStamp = data().deepCopy(fields()[1].schema(), other.timeStamp);
				fieldSetFlags()[1] = true;
			}
		}

		/**
		 * Gets the value of the 'name' field.
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getName() {
			return name;
		}

		/**
		 * Sets the value of the 'name' field.
		 * 
		 * @param value
		 *            The value of 'name'.
		 * @return This builder.
		 */
		public stream.model.avro.UserAvro.Builder setName(java.lang.CharSequence value) {
			validate(fields()[0], value);
			this.name = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/**
		 * Checks whether the 'name' field has been set.
		 * 
		 * @return True if the 'name' field has been set, false otherwise.
		 */
		public boolean hasName() {
			return fieldSetFlags()[0];
		}

		/**
		 * Clears the value of the 'name' field.
		 * 
		 * @return This builder.
		 */
		public stream.model.avro.UserAvro.Builder clearName() {
			name = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/**
		 * Gets the value of the 'timeStamp' field.
		 * 
		 * @return The value.
		 */
		public java.lang.Long getTimeStamp() {
			return timeStamp;
		}

		/**
		 * Sets the value of the 'timeStamp' field.
		 * 
		 * @param value
		 *            The value of 'timeStamp'.
		 * @return This builder.
		 */
		public stream.model.avro.UserAvro.Builder setTimeStamp(long value) {
			validate(fields()[1], value);
			this.timeStamp = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/**
		 * Checks whether the 'timeStamp' field has been set.
		 * 
		 * @return True if the 'timeStamp' field has been set, false otherwise.
		 */
		public boolean hasTimeStamp() {
			return fieldSetFlags()[1];
		}

		/**
		 * Clears the value of the 'timeStamp' field.
		 * 
		 * @return This builder.
		 */
		public stream.model.avro.UserAvro.Builder clearTimeStamp() {
			fieldSetFlags()[1] = false;
			return this;
		}

		@SuppressWarnings("unchecked")
		public UserAvro build() {
			try {
				UserAvro record = new UserAvro();
				record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
				record.timeStamp = fieldSetFlags()[1] ? this.timeStamp : (java.lang.Long) defaultValue(fields()[1]);
				return record;
			} catch (java.lang.Exception e) {
				throw new org.apache.avro.AvroRuntimeException(e);
			}
		}
	}

	@SuppressWarnings("unchecked")
	private static final org.apache.avro.io.DatumWriter<UserAvro> WRITER$ = (org.apache.avro.io.DatumWriter<UserAvro>) MODEL$
			.createDatumWriter(SCHEMA$);

	@Override
	public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
		WRITER$.write(this, SpecificData.getEncoder(out));
	}

	@SuppressWarnings("unchecked")
	private static final org.apache.avro.io.DatumReader<UserAvro> READER$ = (org.apache.avro.io.DatumReader<UserAvro>) MODEL$
			.createDatumReader(SCHEMA$);

	@Override
	public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
		READER$.read(this, SpecificData.getDecoder(in));
	}

}
